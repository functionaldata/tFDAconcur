._ <- matrix(rnorm(p*r), p, r)
}
S <- {
r <- 3
._ <- matrix(rnorm(p*r), p, r)
._%*%t(._)
}
p <- 10
S <- {
r <- 3
._ <- matrix(rnorm(p*r), p, r)
._%*%t(._)
}
S
S <- {
r <- 3
G <- matrix(rnorm(p*r), p, r)
G%*%t(G)
}
S <- {
r <- 3
G <- matrix(rnorm(p*r), p, r)
G%*%t(G)
}
S
p <- 10
p <- 10
S <- {
r <- 3
G <- matrix(rnorm(p*r), p, r)
G%*%t(G)
}
X <- {G <- 5}
S <- {
r_ <- 3
G_ <- matrix(rnorm(p*r_), p, r_)
G_%*%t(G_)
}
S
S <- {
r_ <- 3
._ <- matrix(rnorm(p*(p-r_), p, p-r_)
._%*%t(._)
}
S <- {
.r <- 3
._ <- matrix(rnorm(p*(p-.r)), p, p-.r)
._%*%t(._)
}
S <- {
.r <- 3
._ <- matrix(rnorm(p*(p-.r)), p, p-.r)
._%*%t(._)
}
p <- 10
S <- {
.r <- 3
._ <- matrix(rnorm(p*(p-.r)), p, p-.r)
._%*%t(._)
}
.r
._
p <- 10
K <- {
.r <- 3
._ <- matrix(rnorm(p*(p-.r)), p, p-.r)
._%*%t(._)
}
p <- 10
K <- {
.r <- 3
._ <- matrix(rnorm(p*.r), p, .r)
._%*%t(._)
}
K
G <- {
.r <- 3
._ <- matrix(rnorm(p*.r), p, .r)
._%*%t(._)
}
G
svd(G)
?diag
kronecker(diag(p), G)
(1:p)*(p+1)+1
(1:p)*(p+1)-(p-1)
(1:p)*(p+1)-p
p
H1 <- kronecker(diag(p), G)
H2 <- H1[(1:p)*(p+1)-p, (1:p)*(p+1)-p]
H2
H1 <- kronecker(diag(p), G)
H2 <- H1[-((1:p)*(p+1)-p), -((1:p)*(p+1)-p)]
H2
eigen(H2)
eigen(H2)$vectors
eigen(H2)$values
p <- 10
r <- 3
G <- {
._ <- matrix(rnorm(p*r), p, r)
._%*%t(._)
}
H1 <- kronecker(diag(p), G)
H2 <- H1[-((1:p)*(p+1)-p), -((1:p)*(p+1)-p)]
eigen(H2)$vectors[, -(1:(p*r))]
basis <- eigen(H2)$vectors[, -(1:(p*r))]
basis
basis <- eigen(H2)$vectors[, -(1:(p*r))]
basis
p <- 10
r <- 3
G <- {
._ <- matrix(rnorm(p*r), p, r)
._%*%t(._)
}
H1 <- kronecker(diag(p), G)
H2 <- H1[-((1:p)*(p+1)-p), -((1:p)*(p+1)-p)]
basis <- eigen(H2)$vectors[, -(1:(p*r))]
basis
p <- 10
r <- 3
G <- {
._ <- matrix(rnorm(p*r), p, r)
._%*%t(._)
}
H1 <- kronecker(diag(p), G)
H2 <- H1[-((1:p)*(p+1)-p), -((1:p)*(p+1)-p)]
basis <- eigen(H2)$vectors[, -(1:(p*r))]
basis
p <- 10
r <- 3
G <- {
._ <- matrix(rnorm(p*r), p, r)
._%*%t(._)
}
H1 <- kronecker(diag(p), G)
H2 <- H1[-((1:p)*(p+1)-p), -((1:p)*(p+1)-p)]
basis <- eigen(H2)$vectors[, -(1:(p*r))]
p <- 10
r <- 3
G <- {
._ <- matrix(rnorm(p*r), p, r)
._%*%t(._)
}
H1 <- kronecker(diag(p), G)
H2 <- H1[-((1:p)*(p+1)-p), -((1:p)*(p+1)-p)]
basis <- eigen(H2)$vectors[, -(1:(p*r))]
basis
H1
G
H1
H2
p <- 10
r <- 3
G <- {
._ <- matrix(rnorm(p*r), p, r)
._%*%t(._)
}
H1 <- kronecker(diag(p), G)
H2 <- H1[-((1:p)*(p+1)-p), -((1:p)*(p+1)-p)]
basis <- eigen(H2)$vectors[, -(1:(p*r))]
basis
H1
G
p <- 10
r <- 3
G <- {
._ <- matrix(rnorm(p*r), p, r)
._%*%t(._)
}
H1 <- kronecker(diag(p), G)
H2 <- H1[-((1:p)*(p+1)-p), -((1:p)*(p+1)-p)]
basis <- eigen(H2)$vectors[, -(1:(p*r))]
basis
H1
H1
basis
p <- 10
r <- 3
G <- {
._ <- matrix(rnorm(p*r), p, r)
._%*%t(._)
}
H1 <- kronecker(diag(p), G)
H2 <- H1[-((1:p)*(p+1)-p), -((1:p)*(p+1)-p)]
basis <- eigen(H2)$vectors[, -(1:(p*r))]
G
G <- {
._ <- matrix(rnorm(p*r), p, r)
._%*%t(._)
}
G
A <- matrix(rnorm(40), 4, 10)
A
A <- matrix(rnorm(40), 4, 10)
A
p_ <- nrow(Adj)
Adj <- diag(TRUE, p)
p <- 4
Adj <- diag(TRUE, p)
Adj
Adj <- diag(TRUE, p)
Adj[upper.tri(Adj)] <- sample(c(FALSE, TRUE), choose(p, 2), replace = TRUE)
Adj
ADJ.RAND <- function(p, prob){
Adj <- diag(TRUE, p)
Adj[upper.tri(Adj)] <- sample(c(FALSE, TRUE), choose(p, 2), replace = TRUE)
Adj | t(Adj)
}
Adj
Adj | t(Adj)
GET.MODEL <- function(Adj){
p_ <- nrow(Adj)
M_ <- matrix(0, p_, (sum(Adj)-p_)/2)
}
Adj <- diag(TRUE, p)
Adj[upper.tri(Adj)] <- sample(c(FALSE, TRUE), choose(p, 2), replace = TRUE)
Adj <- Adj | t(Adj)
p_ <- nrow(Adj)
Adj_ <- diag(TRUE, p)
Adj_[upper.tri(Adj_)] <- sample(c(FALSE, TRUE), choose(p, 2), replace = TRUE)
Adj_ | t(Adj_)
p_ <- nrow(Adj)
M_ <- matrix(0, p_, (sum(Adj)-p_)/2)
M_
(sum(Adj)-p_)/2
dj
Adj
p
seq(0, 1, -1)
seq(0, 0, -1)
seq_len(p_)
i1_ <- 1
i1
p <- nrow(Adj)
M <- matrix(0, p, (sum(Adj)-p)/2)
ind <- 0
seq_len(p-i)
seq_len(p-i1)
i1 <- 1
seq_len(p-i1)
seq_len(p-i1+1)
seq_len(p-i1+1)+1
p <- nrow(Adj)
M <- matrix(0, p, (sum(Adj)-p)/2)
ind <- 1
for(i1 in seq_len(p)){
for(i2 in seq_len(p-i1+1)+1){
if(Adj[i1, i2]){
M[p*(i1-1)+i2] <- M[p*(i2-1)+i1] <- 1
ind <- ind+1
}
}
}
seq_len(p)
seq_len(p-i1+1)+1
i1 <- 2
seq_len(p-i1+1)+1
seq_len(p-i1+1)
p <- nrow(Adj)
M <- matrix(0, p, (sum(Adj)-p)/2)
ind <- 1
for(i1 in seq_len(p)){
for(i2 in seq_len(p-i1+1)){
if(Adj[i1, i2]){
M[p*(i1-1)+i2] <- M[p*(i2-1)+i1] <- 1
ind <- ind+1
}
}
}
M
M <- matrix(0, p, (sum(Adj)-p)/2)
ind <- 1
for(i1 in seq_len(p)){
for(i2 in seq_len(p-i1+1)){
if(Adj[i1, i2]){
M[p*(i1-1)+i2] <- M[p*(i2-1)+i1] <- 1
ind <- ind+1
}
}
}
M
p <- nrow(Adj)
M <- matrix(0, p, (sum(Adj)-p)/2)
ind <- 1
for(i1 in seq_len(p)){
for(i2 in seq_len(i1)){
if(Adj[i1, i2]){
M[p*(i1-1)+i2] <- M[p*(i2-1)+i1] <- 1
ind <- ind+1
}
}
}
M
p <- nrow(Adj)
M <- matrix(0, p, (sum(Adj)-p)/2)
ind <- 1
seq_len(p)
Adj
p <- nrow(Adj)
M <- matrix(0, p, (sum(Adj)-p)/2)
ind <- 1
for(i1 in seq_len(p)){
for(i2 in seq_len(i1)){
if(Adj[i1, i2]){
M[p*(i1-1)+i2] <- M[p*(i2-1)+i1] <- 1
ind <- ind+1
}
}
}
M
p <- nrow(Adj)
M <- matrix(0, p, (sum(Adj)-p)/2)
ind <- 1
for(i1 in seq_len(p)){
for(i2 in seq_len(i1)){
if(Adj[i1, i2]){
M[p*(i1-1)+i2, ind] <- M[p*(i2-1)+i1, ind] <- 1
ind <- ind+1
}
}
}
(sum(Adj)-p)/2
ind <- 1
p <- nrow(Adj)
M <- matrix(0, p, (sum(Adj)+p)/2)
ind <- 1
for(i1 in seq_len(p)){
for(i2 in seq_len(i1)){
if(Adj[i1, i2]){
M[p*(i1-1)+i2, ind] <- M[p*(i2-1)+i1, ind] <- 1
ind <- ind+1
}
}
}
p <- nrow(Adj)
sum(Adj)
sum(Adj)+p
(sum(Adj)+p)/2
ind <- 1
ind
seq_len(p)
seq_len(i1)
Adj[i1, i2]
p <- nrow(Adj)
M <- matrix(0, p^2, (sum(Adj)+p)/2)
ind <- 1
for(i1 in seq_len(p)){
for(i2 in seq_len(i1)){
if(Adj[i1, i2]){
M[p*(i1-1)+i2, ind] <- M[p*(i2-1)+i1, ind] <- 1
ind <- ind+1
}
}
}
M
GET.MODEL <- function(Adj){
p <- nrow(Adj)
M <- matrix(0, p^2, (sum(Adj)+p)/2)
ind <- 1
for(i1 in seq_len(p)){
for(i2 in seq_len(i1)){
if(Adj[i1, i2]){
M[p*(i1-1)+i2, ind] <- M[p*(i2-1)+i1, ind] <- 1
ind <- ind+1
}
}
}
return(M)
}
ADJ.RAND <- function(p, prob){
Adj_ <- diag(TRUE, p)
Adj_[upper.tri(Adj_)] <- sample(c(FALSE, TRUE), choose(p, 2), replace = TRUE)
Adj_ | t(Adj_)
}
M <- GET.MODEL(Adj)
M
GET.MODEL <- function(Adj){
p <- nrow(Adj)
M <- matrix(0, p^2, (sum(Adj)+p)/2)
ind <- 1
for(i1 in seq_len(p)){
for(i2 in seq_len(i1)){
if(Adj[i1, i2]){
M[p*(i1-1)+i2, ind] <- M[p*(i2-1)+i1, ind] <- 1
ind <- ind+1
}
}
}
return(M)
}
ADJ.RAND <- function(p, prob){
Adj_ <- diag(TRUE, p)
Adj_[upper.tri(Adj_)] <- sample(c(FALSE, TRUE), choose(p, 2), replace = TRUE)
Adj_ | t(Adj_)
}
GET.MODEL <- function(Adj){
p <- nrow(Adj)
M <- matrix(0, p^2, (sum(Adj)+p)/2)
ind <- 1
for(i1 in seq_len(p)){
for(i2 in seq_len(i1)){
if(Adj[i1, i2]){
M[p*(i1-1)+i2, ind] <- M[p*(i2-1)+i1, ind] <- 1
ind <- ind+1
}
}
}
return(M)
}
p <- nrow(Adj)
M <- matrix(0, p^2, (sum(Adj)+p)/2)
ind <- 1
for(i1 in seq_len(p)){
for(i2 in seq_len(i1)){
if(Adj[i1, i2]){
M[p*(i1-1)+i2, ind] <- M[p*(i2-1)+i1, ind] <- 1
ind <- ind+1
}
}
}
M
ADJ.RAND <- function(p, prob){
Adj_ <- diag(TRUE, p)
Adj_[upper.tri(Adj_)] <- sample(c(FALSE, TRUE), choose(p, 2), replace = TRUE)
Adj_ | t(Adj_)
}
ADJ.RAND <- function(p, prob){
Adj_ <- diag(TRUE, p)
Adj_[upper.tri(Adj_)] <- sample(c(FALSE, TRUE), choose(p, 2), replace = TRUE, prob = c(1-prob, prob))
Adj_ | t(Adj_)
}
Adj_ <- diag(TRUE, p)
Adj_[upper.tri(Adj_)] <- sample(c(FALSE, TRUE), choose(p, 2), replace = TRUE, prob = c(1-prob, prob))
Adj_ | t(Adj_)
p <- 10
Adj <- ADJ.RAND(p, .5)
Adj
Adj <- ADJ.RAND(p, .1)
Adj
Adj <- ADJ.RAND(p, .1)
Adj
p <- 10
Adj <- ADJ.RAND(p, .5)
Adj
r <- 3
p_ <- nrow(Adj)
._ <- matrix(rnorm(p_*r), p_, r)
._ <- svd(._)
._
S_ <- {
._ <- matrix(rnorm(p_*r), p_, r)
._ <- svd(._)
._ <- ._$u[, 1:r, drop = FALSE]
._%*%t(._)
}
S_
S
S_
p_ <- nrow(Adj)
K <- {
._ <- matrix(rnorm(p_*r), p_, r)
._ <- svd(._)
._$u[, 1:(p_-r), drop = FALSE]
}
p_-r
._$u
._ <- matrix(rnorm(p_*r), p_, r)
svd(._)$u[, 1:(p_-r), drop = FALSE]
._ <- matrix(rnorm(p_*r), p_, r)
svd(._)$u
?sv
svd
?svd
p_ <- nrow(Adj)
K <- {
._ <- matrix(rnorm(p_*r), p_, r)
svd(._, nu = p_)$u[, 1:(p_-r), drop = FALSE]
}
K
setwd("/media/benjamin/ESD-USB/tFDAconcur")
devtools::load_all()
devtools::document()
A <- list.files('tests/testthat')
setwd('tests/testthat')
for(i in 1:length(A)) {print(A[i]); source(A[i])}
devtools::build()
devtools::check()
#In R:
usethis::use_build_ignore(c(".travis.yml","inst/testdata","ISSUE_TEMPLATE.md","tests")) #ignore the files we don't include in the released version
devtools::spell_check()
devtools::check_rhub(".", env_vars = c(`_R_CHECK_FORCE_SUGGESTS_` = "false",
`_R_CHECK_CRAN_INCOMING_USE_ASPELL_` = "true"))
devtools::check_rhub(".", env_vars = c(`_R_CHECK_FORCE_SUGGESTS_` = "false",
`_R_CHECK_CRAN_INCOMING_USE_ASPELL_` = "true"))
devtools::check_win_devel()
devtools::revdep("fdaconcur")
devtools::check_rhub(".", env_vars = c(`_R_CHECK_FORCE_SUGGESTS_` = "false",
`_R_CHECK_CRAN_INCOMING_USE_ASPELL_` = "true"))
devtools::check_rhub(".",email = "sbhattacharjee@ucdavis.edu",
env_vars = c(`_R_CHECK_FORCE_SUGGESTS_` = "false",
`_R_CHECK_CRAN_INCOMING_USE_ASPELL_` = "true"))
devtools::check_rhub(".",
env_vars = c(`_R_CHECK_FORCE_SUGGESTS_` = "false",
`_R_CHECK_CRAN_INCOMING_USE_ASPELL_` = "true"))
rhub::validate_email(email = "sbhattacharjee@ucdavis.edu")
devtools::check_rhub(".",
env_vars = c(`_R_CHECK_FORCE_SUGGESTS_` = "false",
`_R_CHECK_CRAN_INCOMING_USE_ASPELL_` = "true"))
devtools::check_win_devel()
devtools::check_win_devel()
