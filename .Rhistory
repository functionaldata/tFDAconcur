integrate(function(x) (1+x^12/(1-x^4)^3)^(1/4), lower=0, upper=1)
4*1.698467
x <- sort(runif(10^6, 0, 1))
x1 <- x[-length(x)]
x2 <- x[-1]
y <- (1-x^3)^(1/3)
y1 <- y[-length(y)]
y2 <- y[-1]
sum(((x2-x1)^3+(y2-y1)^3)^(1/3))
x <- sort(runif(10^6, 0, 1))
x1 <- x[-length(x)]
x2 <- x[-1]
y <- (1-x^3)^(1/3)
y1 <- y[-length(y)]
y2 <- y[-1]
sum(((x2-x1)^3+(y2-y1)^3)^(1/3))
x <- sort(runif(10^6, 0, 1))
x1 <- x[-length(x)]
x2 <- x[-1]
y <- (1-x^3)^(1/3)
y
x <- sort(runif(10^2, 0, 1))
x1 <- x[-length(x)]
x2 <- x[-1]
y <- (1-x^3)^(1/3)
y1 <- y[-length(y)]
y2 <- y[-1]
sum(((x2-x1)^3+(y2-y1)^3)^(1/3))
x <- sort(runif(10^2))
x1 <- x[-length(x)]
x2 <- x[-1]
y <- (1-x^3)^(1/3)
y
sum(((x2-x1)^3+abs(y2-y1)^3)^(1/3))
x <- sort(runif(10^2))
x1 <- x[-length(x)]
x2 <- x[-1]
y <- (1-x^3)^(1/3)
y1 <- y[-length(y)]
y2 <- y[-1]
sum(((x2-x1)^3+abs(y2-y1)^3)^(1/3))
x <- sort(runif(10^2))
x1 <- x[-length(x)]
x2 <- x[-1]
y <- (1-x^3)^(1/3)
y1 <- y[-length(y)]
y2 <- y[-1]
sum(((x2-x1)^3+abs(y2-y1)^3)^(1/3))
x <- sort(runif(10^6))
x1 <- x[-length(x)]
x2 <- x[-1]
y <- (1-x^3)^(1/3)
y1 <- y[-length(y)]
y2 <- y[-1]
sum(((x2-x1)^3+abs(y2-y1)^3)^(1/3))
p <- 2
x <- sort(runif(10^6))
x1 <- x[-length(x)]
x2 <- x[-1]
y <- (1-x^p)^(1/p)
y1 <- y[-length(y)]
y2 <- y[-1]
sum(((x2-x1)^p+abs(y2-y1)^p)^(1/p))
p <- 2
x <- sort(runif(10^6))
x1 <- x[-length(x)]
x2 <- x[-1]
y <- (1-x^p)^(1/p)
y1 <- y[-length(y)]
y2 <- y[-1]
sum(((x2-x1)^p+abs(y2-y1)^p)^(1/p))
pi
integrate(function(x) (1+x^(p*(p-1))/(1-x^p)^(p-1))^(1/p), lower = 0, upper = 1)
p <- 2
x <- sort(runif(10^6))
x1 <- x[-length(x)]
x2 <- x[-1]
y <- (1-x^p)^(1/p)
y1 <- y[-length(y)]
y2 <- y[-1]
sum(((x2-x1)^p+abs(y2-y1)^p)^(1/p))
integrate(function(x) (1+x^(p*(p-1))/(1-x^p)^(p-1))^(1/p), lower = 0, upper = 1)
p <- 2.1
x <- sort(runif(10^6))
x1 <- x[-length(x)]
x2 <- x[-1]
y <- (1-x^p)^(1/p)
y1 <- y[-length(y)]
y2 <- y[-1]
sum(((x2-x1)^p+abs(y2-y1)^p)^(1/p))
integrate(function(x) (1+x^(p*(p-1))/(1-x^p)^(p-1))^(1/p), lower = 0, upper = 1)
p <- 2.2
x <- sort(runif(10^6))
x1 <- x[-length(x)]
x2 <- x[-1]
y <- (1-x^p)^(1/p)
y1 <- y[-length(y)]
y2 <- y[-1]
sum(((x2-x1)^p+abs(y2-y1)^p)^(1/p))
integrate(function(x) (1+x^(p*(p-1))/(1-x^p)^(p-1))^(1/p), lower = 0, upper = 1)
p <- seq(1, 5, .01)
p <- seq(1, 5, .01)
sapply(p, function(p){
integrate(function(x) (1+x^(p*(p-1))/(1-x^p)^(p-1))^(1/p), lower = 0, upper = 1)$value
})
p <- seq(1, 5, .01)
perim <- sapply(p, function(p){
integrate(function(x) (1+x^(p*(p-1))/(1-x^p)^(p-1))^(1/p), lower = 0, upper = 1)$value
})
plot(p, perim, type='l')
p <- seq(1, 5, .01)
perim <- sapply(p, function(p){
integrate(function(x) (1+x^(p*(p-1))/(1-x^p)^(p-1))^(1/p), lower = 0, upper = 1)$value
})
plot(p, perim, type='l')
p <- 3
x <- sort(runif(10^6))
x1 <- x[-length(x)]
x2 <- x[-1]
y <- (1-x^p)^(1/p)
y1 <- y[-length(y)]
y2 <- y[-1]
integrate(function(x) (1+x^(p*(p-1))/(1-x^p)^(p-1))^(1/p), lower = 0, upper = 1)$value*4
p <- 5
integrate(function(x) (1+x^(p*(p-1))/(1-x^p)^(p-1))^(1/p), lower = 0, upper = 1)$value*4
p = 1000
integrate(function(x) (1+x^(p*(p-1))/(1-x^p)^(p-1))^(1/p), lower = 0, upper = 1)$value*4
p <- seq(1, 10, .01)
perim <- sapply(p, function(p){
integrate(function(x) (1+x^(p*(p-1))/(1-x^p)^(p-1))^(1/p), lower = 0, upper = 1)$value*4
})
plot(p, perim, type='l')
p <- seq(1, 100, .01)
perim <- sapply(p, function(p){
integrate(function(x) (1+x^(p*(p-1))/(1-x^p)^(p-1))^(1/p), lower = 0, upper = 1)$value*4
})
plot(p, perim, type='l')
p <- seq(1, 20, .01)
perim <- sapply(p, function(p){
integrate(function(x) (1+x^(p*(p-1))/(1-x^p)^(p-1))^(1/p), lower = 0, upper = 1)$value*4
})
plot(p, perim, type='l')
2*pi
gamma <- matrix(runif(80), 10, 8)
gamma
gamma <- matrix(runif(80), 10, 8)
vec <- gamma[i_, ]
i_ <- 1
vec <- gamma[i_, ]
t(gamma[seq.int(2, 9), ])
mat <- if(i_ == 1){
t(gamma[seq.int(2, 9), ])
} else {
t(gamma[-c(i_, i_-1), ])
}
mat
sapply(1:nrow(gamma), function(i_){
vec <- gamma[i_, ]
mat <- if(i_ == 1){
t(gamma[seq.int(2, 9), ])
} else {
t(gamma[-c(i_, i_-1), ])
}
solve(mat, vec)
})
sapply(1:nrow(gamma), function(i_){
vec <- gamma[i_, ]
mat <- if(i_ == 1){
t(gamma[seq.int(2, 9), ])
} else {
t(gamma[-c(i_, i_-1), ])
}
beta <- solve(mat, vec)
if(i_ == 1) beta[10] else beta[i_-1]
})
vec <- gamma[i_, ]
mat <- if(i_ == 1){
t(gamma[-c(1, 10), ])
} else {
t(gamma[-c(i_, i_-1), ])
}
beta <- solve(mat, vec)
if(i_ == 1){
beta[8]}
else{
beta[i_-1]
}
i_ <- 10
vec <- gamma[i_, ]
vec
mat <- if(i_ == 1){
t(gamma[-c(1, 10), ])
} else {
t(gamma[-c(i_, i_-1), ])
}
mat
beta <- solve(mat, vec)
beta
sapply(1:nrow(gamma), function(i_){
vec <- gamma[i_, ]
mat <- if(i_ == 1){
t(gamma[-c(1, 10), ])
} else {
t(gamma[-c(i_, i_-1), ])
}
beta <- solve(mat, vec)
if(i_ <= 2){
beta[8]
} else {
beta[i_-2]
}
})
prod(sapply(1:nrow(gamma), function(i_){
vec <- gamma[i_, ]
mat <- if(i_ == 1){
t(gamma[-c(1, 10), ])
} else {
t(gamma[-c(i_, i_-1), ])
}
beta <- solve(mat, vec)
if(i_ <= 2){
beta[8]
} else {
beta[i_-2]
}
}))
p <- 10
S <- {
r <- 3
._ <- matrix(rnorm(p*r), p, r)
}
S <- {
r <- 3
._ <- matrix(rnorm(p*r), p, r)
._%*%t(._)
}
p <- 10
S <- {
r <- 3
._ <- matrix(rnorm(p*r), p, r)
._%*%t(._)
}
S
S <- {
r <- 3
G <- matrix(rnorm(p*r), p, r)
G%*%t(G)
}
S <- {
r <- 3
G <- matrix(rnorm(p*r), p, r)
G%*%t(G)
}
S
p <- 10
p <- 10
S <- {
r <- 3
G <- matrix(rnorm(p*r), p, r)
G%*%t(G)
}
X <- {G <- 5}
S <- {
r_ <- 3
G_ <- matrix(rnorm(p*r_), p, r_)
G_%*%t(G_)
}
S
S <- {
r_ <- 3
._ <- matrix(rnorm(p*(p-r_), p, p-r_)
._%*%t(._)
}
S <- {
.r <- 3
._ <- matrix(rnorm(p*(p-.r)), p, p-.r)
._%*%t(._)
}
S <- {
.r <- 3
._ <- matrix(rnorm(p*(p-.r)), p, p-.r)
._%*%t(._)
}
p <- 10
S <- {
.r <- 3
._ <- matrix(rnorm(p*(p-.r)), p, p-.r)
._%*%t(._)
}
.r
._
p <- 10
K <- {
.r <- 3
._ <- matrix(rnorm(p*(p-.r)), p, p-.r)
._%*%t(._)
}
p <- 10
K <- {
.r <- 3
._ <- matrix(rnorm(p*.r), p, .r)
._%*%t(._)
}
K
G <- {
.r <- 3
._ <- matrix(rnorm(p*.r), p, .r)
._%*%t(._)
}
G
svd(G)
?diag
kronecker(diag(p), G)
(1:p)*(p+1)+1
(1:p)*(p+1)-(p-1)
(1:p)*(p+1)-p
p
H1 <- kronecker(diag(p), G)
H2 <- H1[(1:p)*(p+1)-p, (1:p)*(p+1)-p]
H2
H1 <- kronecker(diag(p), G)
H2 <- H1[-((1:p)*(p+1)-p), -((1:p)*(p+1)-p)]
H2
eigen(H2)
eigen(H2)$vectors
eigen(H2)$values
p <- 10
r <- 3
G <- {
._ <- matrix(rnorm(p*r), p, r)
._%*%t(._)
}
H1 <- kronecker(diag(p), G)
H2 <- H1[-((1:p)*(p+1)-p), -((1:p)*(p+1)-p)]
eigen(H2)$vectors[, -(1:(p*r))]
basis <- eigen(H2)$vectors[, -(1:(p*r))]
basis
basis <- eigen(H2)$vectors[, -(1:(p*r))]
basis
p <- 10
r <- 3
G <- {
._ <- matrix(rnorm(p*r), p, r)
._%*%t(._)
}
H1 <- kronecker(diag(p), G)
H2 <- H1[-((1:p)*(p+1)-p), -((1:p)*(p+1)-p)]
basis <- eigen(H2)$vectors[, -(1:(p*r))]
basis
p <- 10
r <- 3
G <- {
._ <- matrix(rnorm(p*r), p, r)
._%*%t(._)
}
H1 <- kronecker(diag(p), G)
H2 <- H1[-((1:p)*(p+1)-p), -((1:p)*(p+1)-p)]
basis <- eigen(H2)$vectors[, -(1:(p*r))]
basis
p <- 10
r <- 3
G <- {
._ <- matrix(rnorm(p*r), p, r)
._%*%t(._)
}
H1 <- kronecker(diag(p), G)
H2 <- H1[-((1:p)*(p+1)-p), -((1:p)*(p+1)-p)]
basis <- eigen(H2)$vectors[, -(1:(p*r))]
p <- 10
r <- 3
G <- {
._ <- matrix(rnorm(p*r), p, r)
._%*%t(._)
}
H1 <- kronecker(diag(p), G)
H2 <- H1[-((1:p)*(p+1)-p), -((1:p)*(p+1)-p)]
basis <- eigen(H2)$vectors[, -(1:(p*r))]
basis
H1
G
H1
H2
p <- 10
r <- 3
G <- {
._ <- matrix(rnorm(p*r), p, r)
._%*%t(._)
}
H1 <- kronecker(diag(p), G)
H2 <- H1[-((1:p)*(p+1)-p), -((1:p)*(p+1)-p)]
basis <- eigen(H2)$vectors[, -(1:(p*r))]
basis
H1
G
p <- 10
r <- 3
G <- {
._ <- matrix(rnorm(p*r), p, r)
._%*%t(._)
}
H1 <- kronecker(diag(p), G)
H2 <- H1[-((1:p)*(p+1)-p), -((1:p)*(p+1)-p)]
basis <- eigen(H2)$vectors[, -(1:(p*r))]
basis
H1
H1
basis
p <- 10
r <- 3
G <- {
._ <- matrix(rnorm(p*r), p, r)
._%*%t(._)
}
H1 <- kronecker(diag(p), G)
H2 <- H1[-((1:p)*(p+1)-p), -((1:p)*(p+1)-p)]
basis <- eigen(H2)$vectors[, -(1:(p*r))]
G
G <- {
._ <- matrix(rnorm(p*r), p, r)
._%*%t(._)
}
G
A <- matrix(rnorm(40), 4, 10)
A
A <- matrix(rnorm(40), 4, 10)
A
install.packages('devtools')
devtools::load_all()
setwd("/media/benjamin/ESD-USB/tFDAconcur")
devtools::load_all()
devtools::load_all()
A <- list.files('tests/testthat')
A
setwd('tests/testthat')
for(i in 1:length(A))
print(A[i]); source(A[i])
devtools::build()
devtools::check()
devtools::load_all()
A <- list.files('tests/testthat')
setwd('tests/testthat')
for(i in 1:length(A))
print(A[i]); source(A[i])
devtools::build()
devtools::check()
setwd("/media/benjamin/ESD-USB/tFDAconcur")
setwd("/media/benjamin/ESD-USB/tFDAconcur")
devtools::load_all()
A <- list.files('tests/testthat')
setwd('tests/testthat')
for(i in 1:length(A))
print(A[i]); source(A[i])
devtools::build()
devtools::check()
setwd("/media/benjamin/ESD-USB/tFDAconcur")
devtools::load_all()
A <- list.files('tests/testthat')
setwd('tests/testthat')
for(i in 1:length(A)) {print(A[i]); source(A[i])}
devtools::build()
devtools::check()
setwd("/media/benjamin/ESD-USB/tFDAconcur")
devtools::load_all()
A <- list.files('tests/testthat')
setwd('tests/testthat')
A
i = 3
print(A[i])
source(A[i])
devtools::build()
devtools::check()
devtools::build()
devtools::check()
version
packageVersion("Roxygen2")
packageVersion("RoxygenNote")
setwd("/media/benjamin/ESD-USB/tFDAconcur")
devtools::load_all()
A <- list.files('tests/testthat')
setwd('tests/testthat')
for(i in 1:length(A)) {print(A[i]); source(A[i])}
devtools::build()
devtools::check()
?:::
?':::'
devtools::build()
setwd("/media/benjamin/ESD-USB/tFDAconcur")
devtools::load_all()
A <- list.files('tests/testthat')
setwd('tests/testthat')
devtools::build()
devtools::check()
setwd("/media/benjamin/ESD-USB/tFDAconcur")
devtools::load_all()
A <- list.files('tests/testthat')
setwd('tests/testthat')
devtools::build()
setwd("/media/benjamin/ESD-USB/tFDAconcur")
devtools::document()
devtools::build()
#In R:
usethis::use_build_ignore(c(".travis.yml","inst/testdata","ISSUE_TEMPLATE.md","tests")) #ignore the files we don't include in the released version
devtools::spell_check()
devtools
devtools::check_rhub(".", env_vars = c(`_R_CHECK_FORCE_SUGGESTS_` = "false",
`_R_CHECK_CRAN_INCOMING_USE_ASPELL_` = "true"))
devtools::check_win_devel()
devtools::revdep("fdaconcur")
revdepcheck::revdep_check()
usethis::use_cran_comments()
devtools::release()
devtools::release()
